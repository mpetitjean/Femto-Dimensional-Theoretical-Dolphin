# Note: The dependence on the header files is generated by
#       makedepend.  Prior to making, issue the command:
#
#               make depend
#
##########################################################
MAINSRC=tmzdemo1.c 
SRC=${MAINSRC} ricker.c gridtmz.c snapshot2d.c updatetmz.c
OFILES=${SRC:.c=.o}
EXE=${MAINSRC:.c=}

MAINSRC2=tmzdemo2.c 
SRC2=${MAINSRC2} ricker.c gridtmzpec.c grid1dez.c snapshot2d.c\
	updatetmz.c tfsftmz.c abctmz.c
OFILES2=${SRC2:.c=.o}
EXE2=${MAINSRC2:.c=}

MAINSRC3=tmzdemo2-live1d.c 
SRC3=${MAINSRC3} ricker.c gridtmz.c grid1dez.c snapshot2d.c\
	snapshot1d-live.c updatetmz.c tfsftmz.c
OFILES3=${SRC3:.c=.o}
EXE3=${MAINSRC3:.c=}

MAINSRC4=tmzdemo2-no-abc.c 
SRC4=${MAINSRC4} ricker.c gridtmz.c grid1dez.c snapshot2d.c\
	snapshot1d-live.c updatetmz.c tfsftmz.c
OFILES4=${SRC4:.c=.o}
EXE4=${MAINSRC4:.c=}

MAINSRC5=tezdemo.c 
SRC5=${MAINSRC5} rickertez.c abctez.c gridtezpec.c snap2dhz.c\
	updatetez.c grid1dhz.c tfsftez.c
OFILES5=${SRC5:.c=.o}
EXE5=${MAINSRC5:.c=}


all: ${EXE} ${EXE2} ${EXE3} ${EXE4} ${EXE5}

${EXE}: ${OFILES}
	gcc ${OFILES} -lm -o $@

${EXE2}: ${OFILES2}
	gcc ${OFILES2} -lm -o $@

${EXE3}: ${OFILES3}
	gcc ${OFILES3} -lm -o $@

${EXE4}: ${OFILES4}
	gcc ${OFILES4} -lm -o $@

${EXE5}: ${OFILES5}
	gcc ${OFILES5} -lm -o $@


# A way to obtain unique file names -- not truly necessary, but
# prevents some duplication in the depends.  Found the perl script on
# the Web.  No way I would generate this on my own.  Note that the
# double dollar signs are reduced to single dollar signs before perl
# sees the script.
UNIQSRC=$(shell echo ${SRC} ${SRC2} ${SRC3} ${SRC4} ${SRC5} |\
       perl -e 'while(<>) {               \
          %s=();                          \
          @u=grep {! $$s{$$_} ++ } sort(split()); \
          print "@u";}')

#================================================

.SUFFIXES: .c .o

.c.o:
	gcc -c -O -Wall $<

clean:
	rm -f *~ sim.[0-9] sim.[1-9][0-9] sim.*.ppm junk*
	rm -f ${OFILES} ${OFILES2} ${OFILES3} ${OFILES4} ${OFILES5}
	rm -f ${EXE} ${EXE2} ${EXE3} ${EXE4} ${EXE5}

# -Y to prevent search of system headers and
# pipe warning to /dev/null since it will complain
# about not finding the system headers!
depend:
	makedepend -Y ${UNIQSRC} &> /dev/null

# DO NOT DELETE

abctez.o: fdtd-alloc1.h fdtd-macro-tez.h fdtd-grid1.h
abctmz.o: fdtd-alloc1.h fdtd-macro-tmz.h fdtd-grid1.h
grid1dez.o: fdtd-macro-tmz.h fdtd-grid1.h fdtd-alloc1.h
grid1dhz.o: fdtd-macro-tez.h fdtd-grid1.h fdtd-alloc1.h
gridtezpec.o: fdtd-macro-tez.h fdtd-grid1.h fdtd-alloc1.h
gridtmz.o: fdtd-macro-tmz.h fdtd-grid1.h fdtd-alloc1.h
gridtmzpec.o: fdtd-macro-tmz.h fdtd-grid1.h fdtd-alloc1.h
ricker.o: ezinc.h fdtd-macro-tmz.h fdtd-grid1.h
rickertez.o: ezinc.h fdtd-macro-tmz.h fdtd-grid1.h
snap2dhz.o: fdtd-macro-tez.h fdtd-grid1.h
snapshot1d-live.o: fdtd-macro-tmz.h fdtd-grid1.h
snapshot2d.o: fdtd-macro-tmz.h fdtd-grid1.h
tezdemo.o: fdtd-alloc1.h fdtd-macro-tez.h fdtd-grid1.h fdtd-proto2.h
tfsftez.o: fdtd-macro-tez.h fdtd-grid1.h fdtd-proto2.h fdtd-alloc1.h
tfsftez.o: ezinctez.h
tfsftmz.o: fdtd-macro-tmz.h fdtd-grid1.h fdtd-proto2.h fdtd-alloc1.h ezinc.h
tmzdemo1.o: fdtd-alloc1.h fdtd-macro-tmz.h fdtd-grid1.h fdtd-proto1.h ezinc.h
tmzdemo2-live1d.o: fdtd-grid1.h fdtd-alloc1.h fdtd-proto2-live.h ezinc.h
tmzdemo2-live1d.o: fdtd-macro-tmz.h
tmzdemo2-no-abc.o: fdtd-macro-tmz.h fdtd-grid1.h fdtd-alloc1.h fdtd-proto2.h
tmzdemo2.o: fdtd-alloc1.h fdtd-macro-tmz.h fdtd-grid1.h
updatetez.o: fdtd-macro-tez.h fdtd-grid1.h
updatetmz.o: fdtd-macro-tmz.h fdtd-grid1.h
